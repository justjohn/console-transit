#!/usr/bin/env node
var Q = require("q"),
	_ = require("underscore"),
    utils = require("string-utils"),
	MBTA = require("transit-api").MBTA,
    mbta = new MBTA(),
	args = Array.prototype.slice.apply(process.argv),
    line,
    length = 40;

// trim node and weather off
args.shift();
args.shift();

line = args.shift() || "Red";

var tasks = {};

tasks.lookup = function(name) {
	return mbta.lines().then(function(lines) {
		var deferred = Q.defer();
		var subway, i;
		for (i=0;i<lines.length;i++) {
			subway = lines[i];
			if (subway.toLowerCase() == name.toLowerCase())
				return subway;
		}
		throw new Error("Can't find route");
	});
};


tasks.data = function(match) {
	return mbta.subways(match)
};
tasks.parseData = function(subway) {
	var sorted = _.sortBy(subway, function(item) {
		return parseInt(item.PlatformOrder, 10);
	});
	var grouped = _.groupBy(sorted, function(item) {
		return item.Direction;
	});
	return grouped;
};

tasks.predictions = function(line) {
	return mbta.predictions(line);
};
tasks.parsePredictions = function(predictions) {
	var byPlatformKey = _.groupBy(predictions, function(data) {
		return data.PlatformKey;
	});
	return byPlatformKey;
};

var subwayLookup = tasks.lookup(line);

var subwayData = subwayLookup
	.then(tasks.data)
	.then(tasks.parseData);

var subwayPredictions = subwayLookup
	.then(tasks.predictions)
	.then(tasks.parsePredictions);

Q.spread([subwayData, subwayPredictions], function (data, predictions) {
    _.each(data, function(platforms, direction) {
    	console.log(utils.pad(" "+direction+" ", length, "-"));
    	_.each(platforms, function(platform) {
    		var key = platform.PlatformKey,
    			platformPredictions = predictions[key],
    			output = '',
    			predictionText;

    		output += platform.stop_name + ": ";
    		var i, prediction;
    		if (platformPredictions) for (i=0;i<platformPredictions.length;i++) {
				prediction = platformPredictions[i];
				if (prediction.InformationType == "Predicted") {
					predictionText = "  " + prediction.TimeRemaining;
					break;
				}
			}

			if (!predictionText)
				predictionText = "--:--:--";

    		console.log(output + utils.padLeft(predictionText, " ", length-output.length));
    	});
    })
})
.fail(function(err) {
	console.log(err);
});